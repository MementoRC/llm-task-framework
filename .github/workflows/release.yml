name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  PYTHONPATH: src
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.get-version.outputs.is-prerelease }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Get version from tag or input
      id: get-version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Check if this is a pre-release
        if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi

        echo "Release version: $VERSION"

    - name: Validate version format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

    - name: Run full test suite
      run: pixi run check

    - name: Run security scans
      run: pixi run -e security security-all

  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Update version
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        echo "__version__ = \"$VERSION\"" > src/llm_task_framework/__version__.py

    - name: Build packages
      run: pixi run build

    - name: Verify packages
      run: |
        pixi run -e dev sh -c "pip install twine && twine check dist/*"
        # Test installation
        pixi run -e prod sh -c "pip install dist/*.whl"
        pixi run -e prod python -c "import llm_task_framework; print(f'Version: {llm_task_framework.__version__}')"
        pixi run -e prod llm-task-framework --version

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: dist/
        retention-days: 30

  test-across-platforms:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    needs: [build-packages]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: dist/

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import llm_task_framework; print('Package imported successfully')"
        llm-task-framework --help

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, test-across-platforms]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi

        # Save changelog to file
        cat > CHANGELOG.md << EOF
        ## What's Changed

        $CHANGELOG

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${{ needs.validate-release.outputs.version }}
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: Release v${{ needs.validate-release.outputs.version }}
        body_path: CHANGELOG.md
        files: dist/*
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
        draft: false
        make_latest: ${{ needs.validate-release.outputs.is-prerelease == 'false' }}

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-github-release]
    environment: release

    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        print-hash: true

  publish-to-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:v${{ needs.validate-release.outputs.version }}
        labels: |
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=v${{ needs.validate-release.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [publish-to-pypi, publish-to-docker]
    if: always()

    steps:
    - name: Notify release completion
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "Version: v${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "PyPI Status: ${{ needs.publish-to-pypi.result }}" >> $GITHUB_STEP_SUMMARY
        echo "Docker Status: ${{ needs.publish-to-docker.result }}" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.publish-to-pypi.result }}" == "success" ]]; then
          echo "✅ Package published to PyPI successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ PyPI publication failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [[ "${{ needs.publish-to-docker.result }}" == "success" ]]; then
          echo "✅ Docker image published successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Docker publication failed" >> $GITHUB_STEP_SUMMARY
        fi
