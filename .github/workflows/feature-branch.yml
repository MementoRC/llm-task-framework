name: Feature Branch

on:
  pull_request:
    branches: [ development ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONPATH: src
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  # Fast feedback for feature branches
  feature-validation:
    name: Feature Branch Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.pixi/cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/pixi.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache pre-commit hooks
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pre-commit-

    - name: Cache test fixtures
      uses: actions/cache@v4
      with:
        path: |
          .pytest_cache
          tests/fixtures/data
        key: ${{ runner.os }}-test-cache-${{ hashFiles('tests/**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-test-cache-

    - name: Check code formatting
      run: pixi run -e dev format-check

    - name: Run linting
      run: pixi run -e dev lint

    - name: Run type checking
      run: pixi run -e dev typecheck

    - name: Run tests
      run: pixi run -e dev test-cov || [ $? -eq 5 ]

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: feature-branch
        name: feature-branch-coverage

  # Security check for feature branches
  feature-security:
    name: Feature Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.pixi/cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/pixi.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache security scan databases
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/bandit
          ~/.cache/safety
          ~/.cache/pip-audit
        key: ${{ runner.os }}-security-db-${{ steps.date.outputs.week }}
        restore-keys: |
          ${{ runner.os }}-security-db-

    - name: Set cache date
      id: date
      run: echo "week=$(date +'%Y-W%V')" >> $GITHUB_OUTPUT

    - name: Run security checks
      run: pixi run -e security security-all
      continue-on-error: true

  # PR status check
  feature-status:
    name: Feature Branch Status
    runs-on: ubuntu-latest
    needs: [feature-validation, feature-security]
    if: always() && github.event.pull_request.draft == false

    steps:
    - name: PR Status Summary
      run: |
        echo "## Feature Branch Status" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ${{ needs.feature-validation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.feature-security.result }} |" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.feature-validation.result }}" == "success" ]]; then
          echo "✅ **Feature branch ready for review**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Feature branch needs fixes**" >> $GITHUB_STEP_SUMMARY
        fi

  # Draft PR handling
  draft-feedback:
    name: Draft PR Feedback
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == true

    steps:
    - name: Draft PR Message
      run: |
        echo "## Draft PR Status" >> $GITHUB_STEP_SUMMARY
        echo "🚧 This is a draft PR - full validation will run when marked as ready for review." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick checks you can run locally:" >> $GITHUB_STEP_SUMMARY
        echo "- \`pixi run format-check\` - Check code formatting" >> $GITHUB_STEP_SUMMARY
        echo "- \`pixi run lint\` - Run linting" >> $GITHUB_STEP_SUMMARY
        echo "- \`pixi run test-fast\` - Run quick tests" >> $GITHUB_STEP_SUMMARY
