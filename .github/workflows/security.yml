name: Security

on:
  push:
    branches: [ main, master, development ]
  pull_request:
    branches: [ main, master, development ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: python
          build-mode: none

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        queries: +security-and-quality

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Install dependencies
      run: |
        pixi install -e security
        pip install --upgrade pip

    - name: Run Safety check
      run: |
        echo "Running Safety dependency vulnerability scan..."
        pixi run -e security safety check --json --output safety-report.json || true
        pixi run -e security safety check || echo "Safety scan completed with findings"

    - name: Run pip-audit scan
      run: |
        echo "Running pip-audit vulnerability scan..."
        pixi run -e security pip-audit --skip-editable --ignore-vuln GHSA-9hjg-9r4m-mvj7 --format=json --output=pip-audit-report.json || true
        pixi run -e security pip-audit --skip-editable --ignore-vuln GHSA-9hjg-9r4m-mvj7 || echo "pip-audit scan completed with findings"

    - name: Run Bandit security scan
      run: |
        echo "Running Bandit static security analysis..."
        pixi run -e security bandit -r src/ -f json -o bandit-report.json || true
        pixi run -e security bandit -r src/ || echo "Bandit scan completed with findings"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-reports
        path: |
          safety-report.json
          pip-audit-report.json
          bandit-report.json
        retention-days: 90

  secret-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install detect-secrets
      run: pip install detect-secrets

    - name: Create baseline if missing
      run: |
        if [ ! -f .secrets.baseline ]; then
          echo "Creating initial secrets baseline..."
          detect-secrets scan --all-files --force-use-all-plugins \
            --baseline .secrets.baseline \
            --exclude-files '.*\.lock$|.*\.pyc$|.*__pycache__.*|.*\.git.*|htmlcov/.*|\.coverage|.*\.egg-info.*|build/.*|dist/.*|\.pytest_cache/.*|\.mypy_cache/.*|\.ruff_cache/.*|site/.*'
        fi

    - name: Run secrets detection
      run: |
        echo "Scanning for new secrets..."
        detect-secrets scan --baseline .secrets.baseline --all-files \
          --exclude-files '.*\.lock$|.*\.pyc$|.*__pycache__.*|.*\.git.*|htmlcov/.*|\.coverage|.*\.egg-info.*|build/.*|dist/.*|\.pytest_cache/.*|\.mypy_cache/.*|\.ruff_cache/.*|site/.*'
        
        if [ $? -ne 0 ]; then
          echo "::error::New secrets detected! Please review and update .secrets.baseline if legitimate."
          echo "To update baseline: detect-secrets scan --update .secrets.baseline"
          echo "To audit findings: detect-secrets audit .secrets.baseline"
          exit 1
        fi

    - name: Verify secrets baseline integrity
      run: |
        if [ -f .secrets.baseline ]; then
          echo "Auditing existing secrets in baseline..."
          detect-secrets audit .secrets.baseline --report \
            --fail-on-unaudited-potential-secret \
            --fail-on-live-secret || echo "Baseline audit completed with findings"
        fi

    - name: Upload secrets baseline
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secrets-baseline
        path: .secrets.baseline
        retention-days: 90

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install license checker
      run: |
        pip install hatch
        hatch run pip install pip-licenses

    - name: Check licenses
      run: |
        hatch run pip-licenses --format=json --output-file=licenses.json
        hatch run pip-licenses --format=plain-vertical

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json
        retention-days: 30

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Verify package integrity
      run: |
        pip install hatch
        hatch build
        # Check for suspicious files in build
        find dist/ -type f -name "*.whl" -exec unzip -l {} \; > package-contents.txt
        find dist/ -type f -name "*.tar.gz" -exec tar -tzf {} \; >> package-contents.txt

    - name: Upload package analysis
      uses: actions/upload-artifact@v4
      with:
        name: package-analysis
        path: package-contents.txt
        retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secret-detection, license-check, supply-chain-security]
    if: always()

    steps:
    - name: Security scan summary
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status | Description |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 CodeQL Analysis | ${{ needs.codeql-analysis.result }} | Advanced static security analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| 📦 Dependency Scan | ${{ needs.dependency-scan.result }} | Vulnerability scanning (Safety, pip-audit, Bandit) |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔑 Secret Detection | ${{ needs.secret-detection.result }} | Credential and secret scanning |" >> $GITHUB_STEP_SUMMARY
        echo "| ⚖️ License Check | ${{ needs.license-check.result }} | License compliance verification |" >> $GITHUB_STEP_SUMMARY
        echo "| 🛡️ Supply Chain | ${{ needs.supply-chain-security.result }} | Package integrity verification |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall security status
        if [[ "${{ needs.codeql-analysis.result }}" == "failure" || "${{ needs.dependency-scan.result }}" == "failure" || "${{ needs.secret-detection.result }}" == "failure" || "${{ needs.license-check.result }}" == "failure" || "${{ needs.supply-chain-security.result }}" == "failure" ]]; then
          echo "**🚨 Security Status: ATTENTION REQUIRED**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "One or more security scans have findings that require review. Please check the detailed reports in the job artifacts." >> $GITHUB_STEP_SUMMARY
        else
          echo "**✅ Security Status: ALL CLEAR**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All security scans completed successfully with no critical findings." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Scan Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- **CodeQL**: Comprehensive static analysis with security-and-quality queries" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependencies**: Safety (vulnerability DB) + pip-audit (OSV database) + Bandit (static analysis)" >> $GITHUB_STEP_SUMMARY
        echo "- **Secrets**: detect-secrets with comprehensive plugin coverage and baseline management" >> $GITHUB_STEP_SUMMARY
        echo "- **Compliance**: License compatibility and supply chain integrity verification" >> $GITHUB_STEP_SUMMARY
