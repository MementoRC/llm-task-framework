[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "llm-task-framework"
description = "Generic framework for building LLM-powered task execution systems with built-in MCP server interface"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "LLM Task Framework Contributors" },
]
keywords = [
    "llm",
    "ai", 
    "mcp",
    "model-context-protocol",
    "task-automation",
    "anthropic",
    "openai",
    "framework"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.10"
dependencies = [
    # Core framework dependencies
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "click>=8.0.0",
    
    # MCP server dependencies
    "mcp>=1.0.0",
    "anyio>=4.0.0",
    
    # LLM provider dependencies
    "anthropic>=0.25.0",
    "openai>=1.12.0",
    
    # Async and performance
    "asyncio-throttle>=1.0.0",
    "aiofiles>=23.0.0",
    
    # Utilities
    "pyyaml>=6.0.0",
    "toml>=0.10.0",
    "pathlib",
    "dataclasses-json>=0.6.0",
]
dynamic = ["version"]

# Note: Development dependencies are managed through Pixi features
# This avoids conflicts between pyproject.toml and Pixi dependency management

[project.urls]
Homepage = "https://github.com/yourusername/llm-task-framework"
Documentation = "https://llm-task-framework.readthedocs.io"
Repository = "https://github.com/yourusername/llm-task-framework.git"
Issues = "https://github.com/yourusername/llm-task-framework/issues"

[project.scripts]
llm-task-framework = "llm_task_framework.cli.main:main"
ltf = "llm_task_framework.cli.main:main"

[tool.hatch.version]
path = "src/llm_task_framework/__version__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/llm_task_framework"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=llm_task_framework --cov-report=html --cov-report=term {args:tests}"
lint = "ruff check {args:src tests}"
lint-fix = "ruff check --fix {args:src tests}"
format = "ruff format {args:src tests}"
type-check = "mypy {args:src}"
check = [
    "lint",
    "type-check", 
    "test"
]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve --dev-addr localhost:8000"

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
    "--cov=llm_task_framework",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "mcp: marks tests as MCP server tests",
    "llm: marks tests that require LLM API access",
]
asyncio_mode = "auto"

# Linting configuration
[tool.ruff]
target-version = "py310"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101"] # Allow unused arguments and assert statements in tests

[tool.ruff.lint.isort]
known-first-party = ["llm_task_framework"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Type checking configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "anthropic.*", 
    "openai.*",
    "rich.*",
    "click.*",
]
ignore_missing_imports = true

# Pixi project configuration
[tool.pixi.project]
name = "llm-task-framework"
channels = ["conda-forge", "pytorch"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[tool.pixi.pypi-dependencies]
llm-task-framework = { path = ".", editable = true }

[tool.pixi.dependencies]
python = ">=3.10,<3.13"

# Development tasks
[tool.pixi.tasks]
install = "python -m pip install -e ."
clean = "rm -rf build/ dist/ *.egg-info/ .pytest_cache/ .coverage htmlcov/ .mypy_cache/ .ruff_cache/"

# Testing tasks
test = "pytest"
test-cov = "pytest --cov=llm_task_framework --cov-report=html --cov-report=term --cov-report=xml"
test-fast = "pytest -x -q"
test-integration = "pytest -m integration"
test-mcp = "pytest -m mcp"
test-llm = "pytest -m llm"

# Code quality tasks
lint = "ruff check src tests"
lint-fix = "ruff check --fix src tests"
format = "ruff format src tests"
format-check = "ruff format --check src tests"
typecheck = "mypy src"

# Combined quality checks
check = { depends-on = ["lint", "typecheck", "test"] }
check-fast = { depends-on = ["lint", "typecheck", "test-fast"] }

# Security tasks  
security-scan = "bandit -r src/"
security-deps = "safety check"
security-audit = "pip-audit"
security-secrets = "detect-secrets scan --all-files"
security-all = { depends-on = ["security-scan", "security-deps", "security-audit", "security-secrets"] }

# Documentation tasks
docs-build = "mkdocs build"
docs-serve = "mkdocs serve --dev-addr localhost:8000"
docs-deploy = "mkdocs gh-deploy"

# Build and release tasks
build = "python -m build"
build-wheel = "python -m build --wheel"
build-sdist = "python -m build --sdist"
upload-test = "twine upload --repository testpypi dist/*"
upload = "twine upload dist/*"

# Pre-commit tasks
pre-commit-install = "pre-commit install"
pre-commit-run = "pre-commit run --all-files"
pre-commit-update = "pre-commit autoupdate"

# Docker tasks
docker-build = "docker build -t llm-task-framework ."
docker-run = "docker run --rm -it llm-task-framework"

# Project maintenance
deps-update = "pixi update"
deps-tree = "pixi tree"
deps-list = "pixi list"

# Development workflow shortcuts
dev-setup = { depends-on = ["install", "pre-commit-install"] }
ci-local = { depends-on = ["format-check", "lint", "typecheck", "test-cov", "security-all"] }

# Development feature with all dev dependencies
[tool.pixi.feature.dev.pypi-dependencies]
# Testing
pytest = ">=7.0.0"
pytest-asyncio = ">=0.21.0"
pytest-cov = ">=4.0.0"
pytest-mock = ">=3.10.0"

# Code quality
ruff = ">=0.1.0"
mypy = ">=1.5.0"
pre-commit = ">=3.0.0"

# Development tools
build = ">=0.10.0"
twine = ">=4.0.0"

[tool.pixi.feature.test.pypi-dependencies]
# Additional testing tools
pytest-json-report = ">=1.5.0"
pytest-html = ">=3.1.0"

[tool.pixi.feature.docs.pypi-dependencies]
# Documentation dependencies
mkdocs = ">=1.5.0"
mkdocs-material = ">=9.0.0"
mkdocs-mermaid2-plugin = ">=1.0.0"

[tool.pixi.feature.security.pypi-dependencies]
# Security scanning tools
bandit = { version = ">=1.7.0", extras = ["toml"] }
safety = ">=2.0.0"
pip-audit = ">=2.0.0"
detect-secrets = ">=1.4.0"

# Python version features
[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

# Environments
[tool.pixi.environments]
# Default development environment  
default = { solve-group = "default" }

# Development environments with feature references
dev = { features = ["dev"], solve-group = "default" }
test = { features = ["dev", "test"], solve-group = "default" }
docs = { features = ["dev", "docs"], solve-group = "default" }
security = { features = ["dev", "security"], solve-group = "default" }
full = { features = ["dev", "test", "docs", "security"], solve-group = "default" }

# Python version environments
py310 = { features = ["py310"], solve-group = "py310" }
py311 = { features = ["py311"], solve-group = "py311" } 
py312 = { features = ["py312"], solve-group = "py312" }

# Coverage configuration
[tool.coverage.run]
source = ["llm_task_framework"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/cli/*",  # CLI often hard to test comprehensively
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]